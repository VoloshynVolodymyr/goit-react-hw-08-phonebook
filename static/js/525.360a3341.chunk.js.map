{"version":3,"file":"static/js/525.360a3341.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.styled.jsx","pages/Register/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    /* margin-left: 600px; */\n    border: 1.5px solid ${props => props.theme.colors.secondBgColor};\n    border-radius: 6px;\n    width: 350px;\n    padding: 30px;\n    background-color: ${props => props.theme.colors.whiteColor};\n    margin-top: 50px;   \n`\n\nexport const FieldWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n`\n  \nexport const Label = styled.label`\n    display: inline;\n    margin-bottom: 5px;\n    font-size: 14px;\n    margin-left: 2px;    \n`\n  \nexport const Input = styled.input`\n    width: 100%;\n    border-radius: 6px;\n    border: ${props => props.theme.colors.secondBgColor} solid 1.5px;\n    outline: none;\n    padding: 4px 8px;\n    font-size: 14px;\n    :focus {\n    border-color: #fff;\n    outline: ${props => props.theme.colors.mainBgColor} solid 2px;\n    }    \n`\n  \nexport const Button = styled.button`\n    padding: 8px 20px;\n    width: 100%;\n    font-size: 14px;\n    border: none;\n    border-radius: 6px;\n    font-weight: 400;\n    color: ${props => props.theme.colors.whiteColor};\n    background-color: ${props => props.theme.colors.mainButtonColor};\n    transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n    cursor: pointer;  \n    :hover {\n    background-color: ${props => props.theme.colors.mainBgColor};\n  }  \n`\n\nexport const ErrorMessage = styled.p`\n    color: ${props => props.theme.colors.errorColor};\n    text-align: center;\n`","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useRegisterMutation } from 'Store/auth/authApi';\nimport { Button, ErrorMessage, FieldWrapper, Form, Input, Label } from './RegisterForm.styled';\n\nexport default function RegisterForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [register, { isLoading, isError }] = useRegisterMutation();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const contact = { name, email, password };\n    register(contact);\n  };\n\n  const nameId = nanoid();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name': {\n        setName(value);\n        break;\n      }\n      case 'email': {\n        setEmail(value);\n        break;\n      }\n      case 'password': {\n        setPassword(value);\n        break;\n      }\n      default:\n        throw new Error(`Unsuported input name ${name}`);\n    }\n  };\n\n  return (\n    <>\n      {isError && (\n        <ErrorMessage>Something went wrong. Please try again.</ErrorMessage>\n      )}\n      <Form onSubmit={handleFormSubmit}>\n        <FieldWrapper>\n          <Label htmlFor={nameId}>\n            Username\n          </Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            autoFocus\n            required\n          />\n        </FieldWrapper>\n        <FieldWrapper>\n          <Label htmlFor={emailId}>\n            Email adress\n          </Label>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            required\n          />\n        </FieldWrapper>\n        <FieldWrapper>\n          <Label htmlFor={passwordId}>\n            Password\n          </Label>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            required\n          />\n        </FieldWrapper>\n        <Button disabled={isLoading} type=\"submit\">\n          Register\n        </Button>\n      </Form>\n    </>\n  );\n}","import styled from \"@emotion/styled\";\n\nexport const Header = styled.h1`\n  text-align: center;\n  font-size: 24px;\n  font-weight: 400;\n  margin-bottom: 20px;\n  margin-top: 150px;\n  /* margin-left: 700px; */\n`\n\nexport const WrapperRegister = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 800px;\n`","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Header, WrapperRegister } from './Register.styled';\n\nexport default function Register() {\n  return (\n    <WrapperRegister>\n      <Header>Let's create your account</Header>\n      <RegisterForm />\n    </WrapperRegister>\n  );\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","props","theme","colors","secondBgColor","whiteColor","FieldWrapper","Label","Input","mainBgColor","Button","mainButtonColor","ErrorMessage","errorColor","RegisterForm","useState","name","setName","email","setEmail","password","setPassword","useRegisterMutation","register","isLoading","isError","nameId","nanoid","emailId","passwordId","handleInputChange","e","currentTarget","value","Error","onSubmit","preventDefault","htmlFor","type","onChange","autoComplete","autoFocus","required","disabled","Header","WrapperRegister","Register","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}