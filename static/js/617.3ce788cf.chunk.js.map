{"version":3,"file":"static/js/617.3ce788cf.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.styled.jsx","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    margin-left: auto;\n    margin-right: auto;\n    border: 1.5px solid ${props => props.theme.colors.secondBgColor};\n    border-radius: 6px;\n    width: 350px;\n    padding: 30px;\n    background-color: ${props => props.theme.colors.whiteColor};   \n`\n\nexport const FieldWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n`\n  \nexport const Label = styled.label`\n    display: inline;\n    margin-bottom: 5px;\n    font-size: 14px;\n    margin-left: 2px;    \n`\n  \nexport const Input = styled.input`\n    width: 100%;\n    border-radius: 6px;\n    border: ${props => props.theme.colors.secondBgColor} solid 1.5px;\n    outline: none;\n    padding: 4px 8px;\n    font-size: 14px;\n    :focus {\n    border-color: #fff;\n    outline: ${props => props.theme.colors.mainBgColor} solid 2px;\n    }    \n`\n  \nexport const Button = styled.button`\n    padding: 8px 20px;\n    width: 100%;\n    font-size: 14px;\n    border: none;\n    border-radius: 6px;\n    font-weight: 400;\n    color: ${props => props.theme.colors.whiteColor};\n    background-color: ${props => props.theme.colors.mainButtonColor};\n    transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n    cursor: pointer;  \n    :hover {\n    background-color: ${props => props.theme.colors.mainBgColor};\n  }  \n`\n\nexport const ErrorMessage = styled.p`\n    color: ${props => props.theme.colors.errorColor};\n    text-align: center;\n`\n  \n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useLoginMutation } from 'Store/auth/authApi';\n\nimport { Button, ErrorMessage, FieldWrapper, Form, Input, Label } from './LoginForm.styled';\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [login, { isLoading, isError }] = useLoginMutation();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const contact = { email, password };\n    login(contact);\n  };\n\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email': {\n        setEmail(value);\n        break;\n      }\n      case 'password': {\n        setPassword(value);\n        break;\n      }\n      default:\n        throw new Error(`Unsuported input name ${name}`);\n    }\n  };\n\n  return (\n    <>\n      {isError && (\n        <ErrorMessage>Something went wrong. Please try again.</ErrorMessage>\n      )}\n      <Form onSubmit={handleFormSubmit}>\n        <FieldWrapper>\n          <Label htmlFor={emailId}>\n            Email adress\n          </Label>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            autoFocus\n            required\n          />\n        </FieldWrapper>\n        <FieldWrapper>\n          <Label htmlFor={passwordId}>\n            Password\n          </Label>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            required\n          />\n        </FieldWrapper>\n        <Button disabled={isLoading} type=\"submit\">\n          Sign in\n        </Button>\n      </Form>\n    </>\n  );\n}","import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Container = styled.div`\n      display: flex;\n  flex-direction: column;\n  margin-left: 800px;\n  margin-top: 150px;\n`\nexport const Header = styled.h1`\n     text-align: center;\n    font-size: 24px;\n    font-weight: 400;\n    margin-bottom: 20px;   \n`\n\nexport const Text = styled.p`\n    text-align: center;\n    margin-top: 12px;    \n`\n  \nexport const ContactsLink = styled(NavLink)`\n    color: ${props => props.theme.colors.secondBgColor};\n    margin-left: 5px;\n    &:hover, :focus {\n        scale: 1.05;\n    }\n`\n  \n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { Container, Header, Text, ContactsLink } from './Login.styled';\n\nexport default function Login() {\n  return (\n    <Container>\n      <Header>Sign in to Phonebook</Header>\n      <LoginForm />\n      <Text>\n        New to Phonebook?\n        <ContactsLink to=\"/register\">\n          Create an account\n        </ContactsLink>\n      </Text>\n    </Container>\n  );\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","props","theme","colors","secondBgColor","whiteColor","FieldWrapper","Label","Input","mainBgColor","Button","mainButtonColor","ErrorMessage","errorColor","LoginForm","useState","email","setEmail","password","setPassword","useLoginMutation","login","isLoading","isError","emailId","nanoid","passwordId","handleInputChange","e","currentTarget","name","value","Error","onSubmit","preventDefault","htmlFor","type","onChange","autoComplete","autoFocus","required","disabled","Container","Header","Text","ContactsLink","NavLink","Login","to","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}