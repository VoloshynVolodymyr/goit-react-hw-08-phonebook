{"version":3,"file":"static/js/824.40d35ae6.chunk.js","mappings":"4OAKaA,EAAc,WACzB,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAErBC,GAAyBC,EAAAA,EAAAA,UAAQ,WACrC,OAAOC,EAAAA,EAAAA,IACL,CAAC,SAAAC,GAAQ,OAAIA,EAASC,IAAb,EAAmB,SAACC,EAAGR,GAAJ,OAAeA,CAAf,IAC5B,SAACS,EAAUT,GAAY,IAAD,EACpB,wBACES,QADF,IACEA,EAAAA,EADF,OACYA,QADZ,IACYA,OADZ,EACYA,EAAUT,QAAO,SAAAU,GAAO,OAChCA,EAAQC,KAAKC,cAAcC,SAASb,EAAOY,cADX,WADpC,QAGO,EAER,GAEJ,GAAE,IAEH,OAAOE,EAAAA,EAAAA,SAAoBC,EAAW,CACpCC,iBADoC,SACnBC,GACf,OAAO,kBACFA,GADL,IAEEC,iBAAkBf,EAAuBc,EAAQjB,IAEpD,GAEJ,C,kFC7BD,SAASmB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,C,0GCXaS,EAAOC,EAAAA,EAAAA,KAAH,wNAKO,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,eAAvB,IAMhBC,EAAQL,EAAAA,EAAAA,MAAH,qGAIL,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,UAAvB,IAELC,EAAeP,EAAAA,EAAAA,IAAH,0KAQZQ,EAAQR,EAAAA,EAAAA,MAAH,qEAILS,GAAST,EAAAA,EAAAA,GAAO,SAAPA,CAAH,yWACN,SAAAC,GAAK,OAAIA,EAAMC,MAAMQ,QAAQ,EAAxB,IACI,SAAAT,GAAK,OAAIA,EAAMC,MAAMC,OAAOQ,aAAvB,IACR,SAAAV,GAAK,OAAIA,EAAMC,MAAMQ,QAAQ,EAAxB,IACZ,SAAAT,GAAK,OAAIA,EAAMC,MAAMQ,QAAQ,EAAxB,IACN,SAAAT,GAAK,OAAIA,EAAMC,MAAMQ,QAAQ,GAAxB,I,SC7BD,SAASE,EAAT,GAAoC,IAAbrC,EAAY,EAAZA,SACpC,GAAsCsC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAEA,GAAoCC,EAAAA,EAAAA,MAApC,eAAOC,EAAP,KAAqBC,EAArB,KAAqBA,UAEfC,EAAgB,eFCkBC,EEDlB,GFCkBA,EEDlB,UAAG,WAAMC,GAAN,0EACvBA,EAAEC,iBAEIhD,EAAU,CAAEC,KAAMqC,EAAaW,OAAQT,IAG3CzC,EAASmD,MACP,qBAAGjD,KAAgBC,gBAAkBF,EAAQC,KAAKC,aAAlD,IAPmB,uBAUrBiD,EAAAA,GAAAA,MAAA,UAAenD,EAAQC,KAAvB,4BAVqB,0BAcvB0C,EAAW3C,GAEXuC,EAAe,IACfE,EAAiB,IAjBM,0CFElB,WACL,IAAIW,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIlC,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMoC,EAAGU,MAAMJ,EAAME,GACzB,SAASzC,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAO2C,GACdhD,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAAS2C,EACnE,CACA5C,OAAMR,EACR,GACF,GEfsB,sDAoBhBqD,EAAoB,SAAAX,GACxB,MAAwBA,EAAEY,cAAlB1D,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACd,OAAQjB,GACN,IAAK,OACHsC,EAAerB,GACf,MAEF,IAAK,QACHuB,EAAiBvB,GACjB,MAEF,QACE,MAAM,IAAI0C,MAAJ,gCAAmC3D,IAE9C,EAEK4D,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAEjB,OACE,iCACA,SAAC,KAAD,CAASE,SAAS,gBAGhB,UAACzC,EAAD,CAAM0C,SAAUpB,EAAhB,WACE,UAACd,EAAD,YACE,SAACC,EAAD,CAAOkC,QAASL,EAAhB,mBAGA,SAAChC,EAAD,CACEsC,KAAK,OACLlE,KAAK,OACLmE,GAAIP,EACJ3C,MAAOoB,EACP+B,SAAUX,EACVY,aAAa,MACbC,WAAS,EACTC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,4BACE,SAAC1C,EAAD,CAAOkC,QAASH,EAAhB,qBAGA,SAAClC,EAAD,CACEsC,KAAK,MACLlE,KAAK,QACLmE,GAAIL,EACJ7C,MAAOsB,EACP8B,aAAa,MACbD,SAAUX,EACVc,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAACzC,EAAD,CAAQkC,KAAK,SAASQ,SAAU/B,EAAhC,SACGA,EAAY,YAAc,qBAKpC,CC/FM,IAAMgC,EAAYpD,EAAAA,EAAAA,IAAH,oGAOTqD,EAAmBrD,EAAAA,EAAAA,GAAH,oHCNd,SAASsD,IACtB,IAAQtE,GAAqBnB,EAAAA,EAAAA,KAArBmB,iBACR,OACE,UAACoE,EAAD,YACE,UAACC,EAAD,+BACkB,kBADlB,yBAGA,SAACzC,EAAD,CAAarC,SAAUS,MAG5B,C,wDCZM,IAkBIsD,EAAS,eAACiB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACf,EAAIgB,GAWvD,OAREhB,IAFFgB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Hooks/useContact.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/AddContact/AddContact.styled.jsx","pages/AddContact/AddContact.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useMemo } from 'react';\nimport { useGetContactsQuery } from 'Store/contacts/contactsApi';\nimport { getContactsFilter } from 'Store/filterSlice';\nexport const useContacts = () => {\n  const filter = useSelector(getContactsFilter);\n\n  const selectFilteredContacts = useMemo(() => {\n    return createSelector(\n      [response => response.data, (_, filter) => filter],\n      (contacts, filter) => {\n        return (\n          contacts??contacts?.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n          ) ?? []\n        );\n      }\n    );\n  }, []);\n\n  return useGetContactsQuery(undefined, {\n    selectFromResult(result) {\n      return {\n        ...result,\n        filteredContacts: selectFilteredContacts(result, filter),\n      };\n    },\n  });\n};","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: ${props => props.theme.colors.mainButtonColor};\n    width: 640px;\n    height: 250px;\n    padding: 20px;\n`\n\nexport const Input = styled.input`\n    width: 300px;\n    height: 30px;\n    font-size: 24px;\n    color: ${props => props.theme.colors.titleColor};\n`\nexport const InputWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content:space-between;\n    width: 400px;\n    align-items: center;\n    margin: 10px;\n`\nexport const Label = styled.label`\n  font-weight: bold;\n  margin-right: 30px;\n`\nexport const Button = styled('button')`\n  padding: ${props => props.theme.spacing(2)};\n  background-color: ${props => props.theme.colors.secondBgColor};\n  border-radius: ${props => props.theme.spacing(1)};\n  margin: ${props => props.theme.spacing(3)};\n  width: ${props => props.theme.spacing(25)};\n  font-weight: bold;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.3), -23px 0 20px -23px rgba(0,0,0,0.8), 23px 0 20px -23px rgba(0,0,0,0.8), 0 0 40px rgba(0,0,0,0.1) inset; \n  &:hover {\n    scale: 1.1;\n  }\n`\n\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useState } from 'react';\nimport { useAddContactMutation } from 'Store/contacts/contactsApi';\nimport { Button, Form, Input, InputWrapper, Label } from './ContactForm.styled';\n\nexport default function ContactForm({ contacts }) {\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n\n  const [addContact, { isLoading }] = useAddContactMutation();\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n\n    const contact = { name: contactName, number: contactNumber };\n\n    if (\n      contacts.some(\n        ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n      )\n    ) {\n      toast.error(`${contact.name} is already in contacts`);\n      return;\n    }\n\n    addContact(contact);\n\n    setContactName('');\n    setContactNumber('');\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name': {\n        setContactName(value);\n        break;\n      }\n      case 'phone': {\n        setContactNumber(value);\n        break;\n      }\n      default:\n        throw new Error(`Unsuported input name ${name}`);\n    }\n  };\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <>\n    <Toaster position=\"top-center\" />\n      {/* isError && {toast.error(`Something went wrong. Please try again.`)}; */}\n      \n      <Form onSubmit={handleFormSubmit}>\n        <InputWrapper>\n          <Label htmlFor={nameId}>\n            Name\n          </Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            id={nameId}\n            value={contactName}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            autoFocus\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </InputWrapper>\n        <div>\n          <Label htmlFor={numberId}>\n            Number\n          </Label>\n          <Input\n            type=\"tel\"\n            name=\"phone\"\n            id={numberId}\n            value={contactNumber}\n            autoComplete=\"off\"\n            onChange={handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Adding...' : 'Add contact'}\n        </Button>\n      </Form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin: auto;\nmargin-top: 150px;\n`\n\nexport const AddContactHeader = styled.h1`\n  text-align: center;\n  font-size: 24px;\n  font-weight: 400;\n  margin-bottom: 20px;\n  \n`","import { useContacts } from '../../Hooks/useContact';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Container, AddContactHeader } from './AddContact.styled';\nexport default function AddContact() {\n  const { filteredContacts } = useContacts();\n  return (\n    <Container>\n      <AddContactHeader>\n        Add new contact <br /> to your Phonebook\n      </AddContactHeader>\n      <ContactForm contacts={filteredContacts} />\n    </Container>\n  );\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useContacts","filter","useSelector","getContactsFilter","selectFilteredContacts","useMemo","createSelector","response","data","_","contacts","contact","name","toLowerCase","includes","useGetContactsQuery","undefined","selectFromResult","result","filteredContacts","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","Form","styled","props","theme","colors","mainButtonColor","Input","titleColor","InputWrapper","Label","Button","spacing","secondBgColor","ContactForm","useState","contactName","setContactName","contactNumber","setContactNumber","useAddContactMutation","addContact","isLoading","handleFormSubmit","fn","e","preventDefault","number","some","toast","self","this","args","arguments","apply","err","handleInputChange","currentTarget","Error","nameId","nanoid","numberId","position","onSubmit","htmlFor","type","id","onChange","autoComplete","autoFocus","pattern","title","required","disabled","Container","AddContactHeader","AddContact","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}